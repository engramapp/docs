<!-- ---
import { Icon } from '@astrojs/starlight/components';
import SidebarPersister from '@astrojs/starlight/components/SidebarPersister.astro';
import SidebarSublist from '@astrojs/starlight/components/SidebarSublist.astro';
// import type { SidebarEntry } from 'node_modules/@astrojs/starlight/utils/navigation';
// import { stripLeadingAndTrailingSlashes } from 'node_modules/@astrojs/starlight/utils/path';
// import { allPages } from '~/content';
import { isSubPage } from '~/util/isSubPage';
// import { stripLangFromSlug } from '~/util/path-utils';
// import Sponsors from '../LeftSidebar/Sponsors.astro';
import TabbedContent from './tabs/TabbedContent.astro';
import TabListItem from './tabs/TabListItem.astro';
import TabPanel from './tabs/TabPanel.astro';

const { sidebar, id } = Astro.props;

// Recursively tweaks properties of sidebar entries.
// - Adds a fallback class to entries in the sidebar that don’t exist in the current language.
// - Marks pages as “current” if they parents of pages that don’t appear in the sidebar.
function markEntries(i: SidebarEntry) {
	if (i.type === 'group') {
		i.entries.forEach(markEntries);
	} else {
		const itemSlug = stripLeadingAndTrailingSlashes(i.href);
		// const itemSlugWithoutLang = stripLangFromSlug(itemSlug);
		const isFallback = !allPages.some((entry) => entry.id === itemSlug);
		if (isFallback) i.attrs.class = 'fallback';
		i.isCurrent ||= isSubPage(id, itemSlug);
	}
}
sidebar.forEach(markEntries);

// Make sure all top-level items in the sidebar are groups.
type Group = Extract<SidebarEntry, { type: 'group' }>;
function assertGroups(sidebar: SidebarEntry[]): asserts sidebar is Group[] {
	for (const entry of sidebar) {
		if (entry.type !== 'group') {
			throw new Error('Top-level links are not permitted in the docs sidebar.');
		}
	}
}
assertGroups(sidebar);

/** Convert a group label to an `id` we can use to identify tab panels. */
// The id is prefixed to avoid clashing with existing heading IDs on the page.
const makeId = (label: string) => '__tab-' + label.toLowerCase().replaceAll(/\s+/g, '-');

/** Get the icon for a group. Update the icon names in the array to change the icons associated with a group. */
const getIcon = (index: number) =>
	(['rocket', 'open-book', 'information', 'puzzle', 'setting'] as const)[index];

/** Determine if an array of sidebar items contains the current page.  */
const isCurrent = (sidebar: SidebarEntry[]): boolean =>
	sidebar
		.map((entry) => (entry.type === 'link' ? entry.isCurrent : isCurrent(entry.entries)))
		.some((entry) => entry === true);
---

<SidebarPersister {...Astro.props}>
	<TabbedContent class="tabbed-sidebar">
		<Fragment slot="tab-list">
			{
				sidebar.map(({ label, entries }, index) => (
					<TabListItem id={makeId(label)} initial={isCurrent(entries)} class="tab-item">
						<Icon class="icon" name={getIcon(index)} /> {label}
					</TabListItem>
				))
			}
		</Fragment>
		{
			sidebar.map(({ label, entries }) => (
				<TabPanel id={makeId(label)} initial={isCurrent(entries)}>
					<SidebarSublist sublist={entries} />
				</TabPanel>
			))
		}
	</TabbedContent>
</SidebarPersister> -->